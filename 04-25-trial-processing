import processing.serial.*;
import java.io.PrintWriter;

Serial myPort;
ArrayList<Float> voltageData = new ArrayList<Float>();
ArrayList<String> timeData = new ArrayList<String>();

PrintWriter output;
boolean isRunning = true;
int maxPoints = 300;
float minV = 0;
float maxV = 6;

float targetChargeTime = 4.0; // in hours
float batteryWh = 80.0;       // battery energy requirement
float pumpVoltage = 9.0;      // placeholder, derived later
float dutyCycle = 0.5;        // derived from voltage

Button toggleButton;
TextField inputField;
Button sendButton;

void setup() {
  size(900, 600);
  println(Serial.list());
  String portName = Serial.list()[0];
  myPort = new Serial(this, portName, 9600);
  myPort.bufferUntil('\n');

  String timestamp = year() + nf(month(), 2) + nf(day(), 2) + "_" + nf(hour(), 2) + nf(minute(), 2);
  output = createWriter("voltage_log_" + timestamp + ".csv");
  output.println("Time (s),Voltage (V)");

  toggleButton = new Button("Pause", width - 120, 20, 80, 30);
  sendButton = new Button("Set Time", 400, 550, 100, 30);
  inputField = new TextField(250, 550, 130, 30);
}

void draw() {
  background(255);
  drawAxes();
  drawPlot();
  drawLabels();
  toggleButton.display();
  sendButton.display();
  inputField.display();
}

void serialEvent(Serial p) {
  if (!isRunning) return;

  String input = p.readStringUntil('\n');
  if (input != null) {
    input = trim(input);
    try {
      float voltage = float(input);
      voltageData.add(voltage);
      timeData.add(str(millis() / 1000.0));

      if (voltageData.size() > maxPoints) {
        voltageData.remove(0);
        timeData.remove(0);
      }

      output.println(timeData.get(timeData.size() - 1) + "," + voltage);
    } catch (Exception e) {
      println("Parse error: " + input);
    }
  }
}

void drawAxes() {
  stroke(0);
  line(60, 40, 60, height - 80);
  line(60, height - 80, width - 40, height - 80);
}

void drawPlot() {
  noFill();
  stroke(50, 100, 255);
  beginShape();
  for (int i = 0; i < voltageData.size(); i++) {
    float x = map(i, 0, maxPoints, 60, width - 40);
    float y = map(voltageData.get(i), minV, maxV, height - 80, 40);
    vertex(x, y);
  }
  endShape();
}

void drawLabels() {
  fill(0);
  textSize(14);
  text("Live Voltage (V)", 20, 20);
  textAlign(CENTER);
  text("Time (rolling)", width / 2, height - 40);

  for (float v = minV; v <= maxV; v += 1) {
    float y = map(v, minV, maxV, height - 80, 40);
    textAlign(RIGHT);
    text(nf(v, 1, 1), 55, y + 5);
    stroke(230);
    line(60, y, width - 40, y);
  }
}

void mousePressed() {
  if (toggleButton.isClicked(mouseX, mouseY)) {
    isRunning = !isRunning;
    toggleButton.label = isRunning ? "Pause" : "Start";
  }

  if (sendButton.isClicked(mouseX, mouseY)) {
    try {
      float enteredTime = float(inputField.text);
      targetChargeTime = constrain(enteredTime, 0.5, 24.0);
      float powerNeeded = batteryWh / targetChargeTime; // in W

      // Estimate required flow rate (based on 170 W per 100 cc/min from PDF)
      float flowRate = (powerNeeded / 170.0) * 100.0; // in cc/min

      // Convert flowRate to voltage: Assume linear relation V = (flow + b) / a
      float a = 0.2758; // from your plot
      float b = 0.7036;
      pumpVoltage = (flowRate / 60.0 + b) / a; // convert cc/min to mL/s first

      // Convert voltage to duty cycle (assume 5–12 V range maps to 0–1 duty cycle)
      dutyCycle = constrain((pumpVoltage - 5.0) / (12.0 - 5.0), 0.0, 1.0);

      myPort.write("SET:" + nf(dutyCycle, 1, 3) + "\n");
      println("Target time: " + targetChargeTime + " h → Power: " + powerNeeded + " W → Flow: " + nf(flowRate, 1, 1) + " cc/min → Voltage: " + nf(pumpVoltage, 1, 2) + " V → Duty Cycle: " + nf(dutyCycle, 1, 2));

    } catch (Exception e) {
      println("Invalid input.");
    }
  }
}

void exit() {
  output.flush();
  output.close();
  super.exit();
}

class Button {
  String label;
  int x, y, w, h;

  Button(String label, int x, int y, int w, int h) {
    this.label = label;
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }

  void display() {
    fill(240);
    stroke(0);
    rect(x, y, w, h, 5);
    fill(0);
    textAlign(CENTER, CENTER);
    text(label, x + w / 2, y + h / 2);
  }

  boolean isClicked(int mx, int my) {
    return mx > x && mx < x + w && my > y && my < y + h;
  }
}

class TextField {
  int x, y, w, h;
  String text = "";

  TextField(int x, int y, int w, int h) {
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
  }

  void display() {
    fill(255);
    stroke(0);
    rect(x, y, w, h);
    fill(0);
    textAlign(LEFT, CENTER);
    text(text, x + 5, y + h / 2);
  }

  void keyPressed() {
    if (key == BACKSPACE && text.length() > 0) {
      text = text.substring(0, text.length() - 1);
    } else if (key >= 32 && key <= 126) {
      text += key;
    }
  }
}

void keyPressed() {
  inputField.keyPressed();
}
